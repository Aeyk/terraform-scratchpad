apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "3"
  labels:
    app: keycloak
  name: keycloak
  namespace: keycloak
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: keycloak
    spec:
      initContainers:
      - name: inject-postgres-secret
        image: busybox:1.28
        command: [
        "sh", "-c", "mkdir -p /opt/keycloak/conf/; cp /tmp/keycloak.conf /opt/keycloak/conf/keycloak.conf; sed -ie s/\\$$POSTGRES_PASSWORD/$(POSTGRES_SUPERUSER_PASSWORD)/g /opt/keycloak/conf/keycloak.conf || sleep 600"]
        env:
        - name: POSTGRES_SUPERUSER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: superuser-password
              name: postgres-cluster
        - name: POSTGRES_KEYCLOAK_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: postgres-keycloak-user
        volumeMounts:
        - mountPath:  /opt/keycloak/conf/ #keycloak.conf
          subPath: keycloak.conf
          readOnly: false
          name: config-scratchpad
        - mountPath: /tmp/keycloak.conf
          name: keycloak-config-file
          readOnly: false
          subPath: keycloak.conf
      - image: ongres/postgres-util
        name: setup-database
        args:
        - psql
        - postgres://postgres:$(POSTGRES_SUPERUSER_PASSWORD)@postgres-cluster.default.svc.cluster.local
        - -c
        - |-
          BEGIN;
            SELECT 'DROP DATABASE keycloak'
            WHERE EXISTS (SELECT FROM pg_database WHERE datname = 'keycloak');
          COMMIT;
          BEGIN;
            SELECT 'CREATE DATABASE keycloak'
            WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'keycloak');
          COMMIT;
          BEGIN;
            SELECT 'CREATE USER keycloak WITH ENCRYPTED PASSWORD "$(POSTGRES_KEYCLOAK_PASSWORD)" CREATEDB'
            WHERE NOT EXISTS (SELECT FROM pg_user WHERE usename = 'keycloak');
            GRANT ALL PRIVILEGES ON DATABASE keycloak TO keycloak;
            GRANT ALL on schema public TO keycloak;
          COMMIT;
        env:
        - name: POSTGRES_SUPERUSER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: superuser-password
              name: postgres-cluster
        - name: POSTGRES_KEYCLOAK_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: postgres-keycloak-user
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      # TODO: good way to auto import realm on container creation?
      # POD=$(kubectl get pods -n keycloak | perl -lane 'print @F[0] unless $. == 1')
      # cat keycloak/keycloak-realm.unencrypted | kubectl exec -n keycloak -it $POD -c keycloak -- bash -c 'cat - > /tmp/keycloak-realm.json; bash'
      # kubectl exec -n keycloak -it $POD -c keycloak -- /opt/keycloak/bin/kc.sh import --file /tmp/keycloak-realm.json
      # - name: import-realm
      #   image: quay.io/keycloak/keycloak:23.0.4
      #   args:
      #   - --verbose
      #   - import
      #   - --file
      #   - /tmp/keycloak-realm
      #  volumeMounts:
      #   - mountPath: /opt/keycloak/conf/ #keycloak.conf
      #     name: config-scratchpad
      #     readOnly: true
      #     subPath: keycloak.conf
      #   - mountPath: /tmp/
      #     subPath: keycloak-realm
      #     name: keycloak-realm
      containers:
      - args:
        - --verbose
        - start
        env:
        - name: KEYCLOAK_ADMIN
          value: admin
        - name: KEYCLOAK_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: keycloak-admin-user
        image: quay.io/keycloak/keycloak:23.0.4
        name: keycloak
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /realms/master
            port: 8080
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /opt/keycloak/conf/ #keycloak.conf
          name: config-scratchpad
          readOnly: true
          subPath: keycloak.conf
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      volumes:
      - name: config-scratchpad
        emptyDir: {}
      - configMap:
          defaultMode: 420
          name: keycloak-config
        name: keycloak-config-file
      - name: keycloak-realm-file
        emptyDir: {}
