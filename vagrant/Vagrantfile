require "yaml"
settings = YAML.load_file "settings.yaml"

IP_SECTIONS = settings["network"]["control_ip"].match(/^([0-9.]+\.)([^.]+)$/)
# First 3 octets including the trailing dot:
IP_NW = IP_SECTIONS.captures[0]
# Last octet excluding all dots:
IP_START = Integer(IP_SECTIONS.captures[1])
NUM_WORKER_NODES = settings["nodes"]["workers"]["count"]
IPS=(1..NUM_WORKER_NODES).each{ |node|
  IP_NW + (IP_START.to_s + node.to_s)
}
Vagrant.configure("2") do |config|
  config.vm.provision "shell", env: { "IP_NW" => IP_NW, "IP_START" => IP_START, "NUM_WORKER_NODES" => NUM_WORKER_NODES }, privileged: false, 
    inline: <<-SHELL
      set -euxo pipefail
      # check for private key for vm-vm comm
      [ -f /vagrant/id_rsa ] || {
        ssh-keygen -t rsa -f /vagrant/id_rsa -q -N ''
      }
      # deploy key
      [ -f /home/vagrant/.ssh/id_rsa ] || {
        cp /vagrant/id_rsa /home/vagrant/.ssh/id_rsa
        chmod 0600 /home/vagrant/.ssh/id_rsa
      }
      # allow ssh passwordless
      ssh vagrant@"$IP_NW$((IP_START))" ~/.ssh/authorized_keys &>/dev/null || {
        cat /vagrant/id_rsa.pub >> ~/.ssh/authorized_keys
        chmod 0600 ~/.ssh/authorized_keys
      }
      for i in `seq 1 ${NUM_WORKER_NODES}`; do
        grep "vagrant@worker-node0${i}" ~/.ssh/authorized_keys &>/dev/null || {
          cat /vagrant/id_rsa.pub >> ~/.ssh/authorized_keys
          chmod 0600 ~/.ssh/authorized_keys
        }
      done
      # exclude node* from host checking
      cat <<-EOF > ~/.ssh/config 
        Host 10.* 
        StrictHostKeyChecking no
        UserKnownHostsFile=/dev/null
        Host worker-node*
        StrictHostKeyChecking no
        UserKnownHostsFile=/dev/null
        Host master-node
        StrictHostKeyChecking no
        UserKnownHostsFile=/dev/null
EOF
SHELL
  config.vm.box = settings["software"]["box"]
  config.vm.box_check_update = true
  (1..NUM_WORKER_NODES).each do |i|
    config.vm.define "node0#{i}" do |node|
      node.vm.hostname = "worker-node0#{i}"
      node.vm.network "private_network", ip: IP_NW + "#{IP_START + i}"
      if settings["shared_folders"]
        settings["shared_folders"].each do |shared_folder|
          node.vm.synced_folder shared_folder["host_path"], shared_folder["vm_path"]
        end
      end
      node.vm.provider "virtualbox" do |vb|
        vb.customize ["modifyvm", :id, "--nictype1", "virtio"] # TODO(Malik): alternatively try natnetwork
        vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
        vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
        vb.cpus = settings["nodes"]["workers"]["cpu"]
        vb.memory = settings["nodes"]["workers"]["memory"]
        if settings["cluster_name"] and settings["cluster_name"] != ""
          vb.customize ["modifyvm", :id, "--groups", ("/" + settings["cluster_name"])]
        end
      end
    end
  end
  config.vm.define "master" do |master|
    master.vm.hostname = "master-node"
    config.vm.box = settings["software"]["box"]
    master.vm.network "private_network", ip: settings["network"]["control_ip"]
    if settings["shared_folders"]
      settings["shared_folders"].each do |shared_folder|
        master.vm.synced_folder shared_folder["host_path"], shared_folder["vm_path"]
      end
    end
    master.vm.provider "virtualbox" do |vb|
      vb.cpus = settings["nodes"]["control"]["cpu"]
      vb.memory = settings["nodes"]["control"]["memory"]
      if settings["cluster_name"] and settings["cluster_name"] != ""
        vb.customize ["modifyvm", :id, "--groups", ("/" + settings["cluster_name"])]
      end
    end
    master.vm.provision "shell", env: { "IPS" => IPS }, privileged: false, 
      path: "/tmp/provisioner-cluster.sh"
  end


end
